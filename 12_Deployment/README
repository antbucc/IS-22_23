---
theme: default
_class: lead
paginate: true
backgroundColor: #fff
marp: true
backgroundImage: url('https://marp.app/assets/hero-background.svg')
header: 'Deployment - Continuous Integration'
footer: 'Antonio Bucchiarone - Trento, 12 December 2022 - Software Engineering'
---

# **Deployment - Continuous Integration**

Software Engineering, Tutorial

#### Antonio Bucchiarone - bucchiarone@fbk.eu

*Academic year 2022/2023 - First semester*


---
# API Testing

> To make **API requests** in our Jest tests, we require a **module** that will query our **endpoints** and return the **responses** to our tests. 
> That module is **SuperTest**, and you can install it using this command:

```javascript
npm install  --save-dev supertest
```

---
# Example 1

- **Jest** and **SuperTest** are set up, and a basic test has been written in the Jest testing framework.  

- Start with the response provided by the endpoint http://localhost:3000/space/destinations. It is a simple array of objects representing the destinations space flights will travel to.

```javascript
[
  "Mars",
  "Moon",
  "Earth",
  "Mercury",
  "Venus",
  "Jupiter"
]
```

---
# Example 1

```javascript
const request = require('supertest');
const app = require("../app");

describe('Space test suite', () => {
    test('tests /destinations endpoints', async() => {
        const response = await request(app).get("/space/destinations");
        expect(response.body).toEqual(["Mars", "Moon", "Earth", "Mercury", "Venus", "Jupiter"]);
        expect(response.body).toHaveLength(6);
        expect(response.statusCode).toBe(200);
        // Testing a single element in the array
        expect(response.body).toEqual(expect.arrayContaining(['Earth']));

    });

    // Insert other tests below this line

    // Insert other tests above this line
});
```
---
# Example 2

> In this example, we will test the **/space/flights/seats** endpoint. This endpoint provides a response that is more complicated than the array one above.

```javascript
{ "starship": [
    {
      "firstClass": {
        "heatedSeats": true,
        "chairOptions": [
          "leather",
          "wollen"
        ],
        "vaultAccess": true,
        "drinksServed": [
          "tea",
          "coffee",
          "space-special",
          "wine"
        ],
        "windowAccess": true,
        "privateCabin": "2",
        "VRAccess": "unlimited",
        "cost": "$20000",
        "seatHover": {
          "cryoMode": [
            "extreme",
            "ludacris",
            "plaid"
          ],
          "staticMode": [
            "ludacris",
            "plaid"
          ]
        }
      },
      "businessClass": { ... }
    }
  ],
  "blueOrigin": [
    {
      "firstClass": { ... },
      "businessClass": { ... }
    }
  ]

}
```
---
# Example 2

```javascript

    test('tests /space/flights/seats endpoint - starship', async () => {
        const response = await request(app).get("/space/flights/seats");
        expect(response.body.starship).toEqual(expect.arrayContaining([expect.any(Object)]));
        // Checking that the starship Object contains firstClass Object which then contains a set of objects
        expect(response.body.starship).toEqual(expect.arrayContaining(
            [expect.objectContaining({ firstClass: expect.any(Object) })]));

        expect(response.body.starship).toEqual(expect.arrayContaining([expect.objectContaining(
            { businessClass: expect.any(Object) })]));

        // Checking that under the bussinessClass Object we have the array drinks served
        expect(response.body.starship)
            .toEqual(expect.arrayContaining([expect.objectContaining({
                businessClass: expect.objectContaining({ drinksServed: expect.any(Array) })
            })]));

        // Checking that under the firstClass: Object we have the option ludacris in the seatHover Object
        expect(response.body.starship)
        .toEqual(expect.arrayContaining([expect.objectContaining({
            firstClass: expect.objectContaining({ seatHover: expect.objectContaining({
                cryoMode : expect.arrayContaining(['ludacris'])}) })
        })]));

        // Checking that under the firstClass: Object we have the option plaid in the seatHover Object
        expect(response.body.starship)
        .toEqual(expect.arrayContaining([expect.objectContaining({
            firstClass: expect.objectContaining({ seatHover: expect.objectContaining({
                staticMode : expect.arrayContaining(['plaid'])}) })
        })]));
    });

```
---

# CI/CD in Node.js with GitHub Actions

> Continuous integration/continuous deployment is a software engineering practice that helps teams to collaborate better and improve their overall software. 

> With **GitHub Actions**, you can easily integrate this into your GitHub project without using an external platform.

> In this lecture, we see how you can use GitHub Actions to set up a **CI/CD pipeline** to your project.
---
# What is continuous integration?

**Continuous integration (CI)** is the software engineering practice that requires *frequent commits* to a *shared repository*. 


> Before CI, people would work on **feature branches** for weeks or months and then try to **merge** this branch to a **main branch**. 

> Think about all that could go wrong during such merge — merge **conflicts** and **failing tests**, just to mention a few.

> **Continuous integration** tries to prevent all of these by encouraging small and frequent code updates. 

> When a code is committed to a repository, it can be **built** and **tested** against **setup workflows** to ensure that the code does not introduce any errors.

---
# What is continuous deployment?

 - **Continuous deployment** means code changes are **automatically deployed/released** to a *testing* or *production* environment as soon as they are merged. T
 
  - This is often interchanged with **continuous delivery** and that’s because they are very similar. 
  - The only difference is that in **continuous delivery**, human intervention (e.g., the click of a button) is needed for the changes to be released. 
  - In **continuous deployment**, everything happens automatically. For the rest of this post, we refer to CD as continuous deployment.

---

# Advantages of CI/CD
Here are more advantages in addition to those already mentioned above:

- **Fault isolation** is simpler and faster. Since changes are smaller, it is easier to isolate the changes that cause a bug after deployment. This makes it **easier to fix or roll back** changes if necessary.
 - Since CI/CD encourages small, frequent changes, **code review time is shorter**.
- A major part of the CI/CD pipeline is the **automated testing of critical flows** for a project. This makes it easier to prevent changes that may break these flows in production.
- Better **code quality** is ensured because you can configure the 

---

# What are GitHub Actions?
> “**GitHub Actions** is a continuous integration and continuous delivery (CI/CD) platform that allows you to **automate your build**, **test**, and **deployment** pipeline. 

> You can create **workflows** that build and test every pull request to your repository, or deploy merged pull requests to production.”

>  you can set up CI/CD pipelines that run when certain **actions are taken on a repository**. 

> You can decide to **run tests for every pull request (PR)** created or merged, you can automatically deploy merged PR, and you can even set up a workflow to add the appropriate labels when a PR is created.

---

> In the Git repository, click on the **Actions** tab. 
> A simple **workflow** with the minimum necessary structure is already suggested, and you have the option to set up a workflow yourself.

![w:600](actions.jpeg)

---
> Click on the **Configure** button for the **Simple workflow**. 

![w:800](configuration.jpeg)

--- 

# Workflows

> a **workflow file is created** file is created: .github/workflows. 

- A workflow is a configurable automated process that runs one or more jobs. 
- You can see the workflow file created here is a **YAML file**. 
- A workflow is defined by a YAML file in your .github/workflows
directory and it is triggered by an event defined in the file.


--- 
# Events

> In every workflow created, you need to specify a specific **event that triggers the workflow**:

```yaml
# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
```

-  the workflow will be run whenever a **push** or **pull** request is made to the main branch. 

---
# Jobs

> A job is a **set of steps** that a workflow should execute on the same runner.
> Steps are executed in order in the same runner and are dependent on each other. 



# Runners
This indicates the server the job should run on. It could be Ubuntu Linux, Microsoft Windows, or macOS, or you can host your own runner that the job should run on.

```yaml
# The type of runner that the job will run on
    runs-on: ubuntu-latest
```
---

# Actions

- An **action** performs a complex, repetitive task. 
- Actions are really important to reduce the amount of code you need to set up a workflow. 
- You can either write an action or use an already existing action from the **GitHub Marketplace**.

> For your project you will need to use a **Node.js action** to build our Node application and a **Heroku action** to deploy our application.

---
#Start Commit

1. **rename** the file to a name of your choice. (ex: **main.yml**)

2. **Commit** this workflow (click on the **Start commit button**), then merge and clone our repository into our local machine.

---

## Setup Heroku CLI on your your machine

https://devcenter.heroku.com/articles/getting-started-with-nodejs?singlepage=true

1. Register on https://www.heroku.com/

1. Install Heroku CLI https://devcenter.heroku.com/articles/heroku-cli

1. CLI log in `heroku login`

---

## Prepare the application

https://devcenter.heroku.com/articles/preparing-a-codebase-for-heroku-deployment#

1. Create *Procfile* `.\Procfile`:

    https://devcenter.heroku.com/articles/preparing-a-codebase-for-heroku-deployment#3-add-a-procfile

    ```yaml
    web: node index.js
    test: jest
    ```

1. Set listening port of Node server:

    https://devcenter.heroku.com/articles/preparing-a-codebase-for-heroku-deployment#4-listen-on-the-correct-port

    ```javascript
    const PORT = process.env.PORT || 8080
    ```

---

## Create heroku app and connect with local repository.

https://devcenter.heroku.com/articles/git#creating-a-heroku-remote

1. **Create a new Heroku app** from your existing repository `heroku create`
  
    Alternatively, create a new app from the Heroku Dashboard and manually add remote source to your local repository `heroku git:remote -a our-heroku-app`

1. **Configure env vars** from *Setting*->*Config Vars* e.g. DB_URL and SUPER_SECRET

1. **Push** repository on *heroku* remote source `git push heroku main`

1. **Start the Heroku app** `heroku ps:scale web=1` and open it `heroku open` or view logs `heroku logs --tail`

You can also run the Heroku app locally through the Procfile `heroku local web`

---

# Travis CI

> The simplest way to test and deploy your projects in the cloud. Easily sync your projects with Travis CI and you’ll be testing your code in minutes - travis-ci.org

---

## Configure repository to use Travis CI

> https://docs.travis-ci.com/user/tutorial/#to-get-started-with-travis-ci-using-github

- Create file `.travis.yml`:

```yaml
language: node_js
```

- On Travis CI Dashboard add your repository

- Check build status of your application

- Click on "Build status image" [![Build Status](https://travis-ci.org/unitn-software-engineering/EasyLib.svg?branch=master)](https://travis-ci.org/unitn-software-engineering/EasyLib) to get the markdown code

- Embed "Build status image" [![Build Status](https://travis-ci.org/unitn-software-engineering/EasyLib.svg?branch=master)](https://travis-ci.org/unitn-software-engineering/EasyLib) in your `readme.MD`



---

## `.gitignore` - Ignoring files from git versioning

- You can start from generic `.gitignore` file generated on www.gitignore.io, such as, https://www.gitignore.io/api/node,windows,linux,visualstudiocode

- **Make sure to always ingore**: `node_modules` `coverage` `.env`

- Put the `.gitignore` file itself under version control `git add .gitignore`

---

## Automatically deploy your Heroku application

- Deploy automatically on Heroku after a successful build by Travis CI:

    https://docs.travis-ci.com/user/deployment/heroku/

    `.travis.yml`:
    ```yaml
    deploy:
      provider: heroku
      api_key:
        secure: "YOUR ENCRYPTED API KEY"
    ```

- Alternatively, auto-deployment from GitHub can be configured on Heroku Dashboard:

    https://devcenter.heroku.com/articles/github-integration


---

# Questions?

bucchiarone@fbk.eu